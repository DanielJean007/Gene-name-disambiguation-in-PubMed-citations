#################################################To use the tmsk tool#############################################################################

Set up the config file.
	doctag = is what makes the contents distinguishable from the other files. In our case, for the good sample T, it was ' doc'
	bodytags = show the text to be used by the program. In our case 'str'

To create a dictionary:
	move to the folder where tmsk is. cd ../../tmsk from the main cmd.
	type: java mkdict 50 test2.dx
		where, 50 is the number of words in the dictionary and test2 is the name of the file to be saved
	Stopwords are removed after the dictionary is generated.

To create the vector format of the good samples based on the dictionary:
	command: java vectorize vectorfile
	Configure the parameters:
		doctag, bodytag, labeltag, infile.
		dictionay: the one generated by us.
		vectorfile: In my tests I left and it commented and still works.

To visualize the vectorized file:
	On excel:
		Select open all files, set delimitado, espaço, geral e concluir.
	To interpret the vec file:
		The number of rows connect to the number of files in the good sample.
		The notation 2@3 means that in that row (file), the word 2 appeared 3 times.

To match a given doc that is a response fom solr against the good samples:
	java matcher goodSample 60 outputfile
		Where, 60 is the 60 top files.
		In the propfile, infile should point to the response of the query against solr.


################################################# Some results ##################################################################################

I ran Riktext tool to create the rule set; however, it classified many files wrong. For the rule it created was to broad.


######################################################### In PubMed #############################################################################

Use this link http://www.ncbi.nlm.nih.gov/pubmed?LinkName=gene_pubmed&from_uid=5694
Where uid is the id of the gene.
Go to Summary and select PMID list. :)
Or even to Abstract text or XMl.


############################################################### Using Mallet ####################################################################
I'va chaged the stopwords to the smartStopwords I found online.

To transform the data into mallet format:
	bin/mallet import-file --input ~/Desktop/Project/Data/PSMB7/instancesSample.txt --output ~/Desktop/Project/Data/PSMB7/instancesMallet.mallet --keep-sequence --remove-stopwords

--TOPIC MODELS
Tutorial: http://programminghistorian.org/lessons/topic-modeling-and-mallet

To transform the data into mallet format:
	bin/mallet import-file --input ~/Desktop/Project/Data/PSMB7/unlabeledData.txt --output ~/Desktop/Project/Data/PSMB7/topicModel/instancesMallet.mlt --keep-sequence --remove-stopwords --preserve-case

To extract topic models:
	bin/mallet train-topics --input ../../Data/PSMB7/topicModel/instancesMallet.mlt --num-topics 20 --num-top-words 30 --output-topic-docs ../../Data/PSMB7/topicModel/proeminentDocs.txt --xml-topic-phrase-report ../../Data/PSMB7/topicModel/sentencesForModel.txt --optimize-interval 20 --output-state ../../Data/PSMB7/topicModel/topic-state.gz --output-topic-keys ../../Data/PSMB7/topicModel/keys.txt --output-doc-topics ../../Data/PSMB7/topicModel/composition.txt
where:
	keys.txt is the document with the topic models.
	num-topics: Num of topic models.	
	num-top-words: Default 20
	output-topic-docs: The most prominent docs for each topic modelling.
	--xml-topic-phrase-report: Most prominent sentences for each topic model.

To extract labels: 
	bin/mallet info --input ../../Data/PSMB7/topicModel/instancesMallet.mallet --print-labels 1 >> ../../Data/PSMB7/topicModel/labels.txt

--CLASSIFIER - Classification doesn’t seem to be the way, unless we have a file with all genes.
Importing data:
	bin/mallet import-file --input ~/Desktop/Project/Data/PSMB7/labeledData.txt --output ~/Desktop/Project/Data/PSMB7/classifier/labeledData.mlt --remove-stopwords --name 0 --label 1 --data 2
The values for name, label and data is to specify the fields of the genes. The fist word in the txt file is the gene classification, the second instance is the abstract.

When training the classifier, the input data CANNOT be from a --keep-sequence call.
To train a classifier:
	bin/mallet train-classifier --input ../../Data/PSMB7/classifier/labeledData.mlt --output-classifier ../../Data/PSMB7/classifier/classifierWinnow.cfr --trainer Winnow --training-portion 0.9 --report train:accuracy test:f1:PSMB7

This is just to judge amongst the best algorithm
	bin/mallet train-classifier --input ../../Data/PSMB7/classifier/labeledData.mlt --training-portion 0.9 --report train:accuracy test:f1:PSMB7 --num-trials 10 --cross-validation 10 --trainer DecisionTree --trainer NaiveBayes --trainer MaxEnt --trainer C45 --trainer BalancedWinnow --trainer MCMaxEnt --trainer Winnow >> ../../Data/PSMB7/classifier/report.txt 
These might need other type of input data: 
	--trainer AdaBoost --trainer AdaBoostM2 --trainer BaggingClassifier --trainer RankMaxEnt

where:
	trainer: Is one of the algorithms to classify. It can be: MaxEnt, NaiveBayes, C45, DecisionTree and many others. See the JavaDoc API for the cc.mallet.classify package to see the complete current list of Trainer classes.
	training-portion is the training set.
	report is to be displayed on the screen.

To classify new files:
 	bin/mallet classify-file --input ../../Data/PSMB7/unlabeledData.txt --output ../../Data/PSMB7/classifier/predictions.txt --classifier ../../Data/PSMB7/classifier/classifierWinnow.cfr
where:
	--input is the file to be classified

--SEQUENCE TAGGING
Finding help:
	java -cp class:/home/danieljean/Desktop/Project/3rdpartyImplementations/mallet-2.0.8RC3/lib/mallet-deps.jar cc.mallet.fst.SimpleTagger --help

where:
	One must be in the folder where mallet is. 

To train a model:
	java -cp class:/home/danieljean/Desktop/Project/3rdpartyImplementations/mallet-2.0.8RC3/lib/mallet-deps.jar cc.mallet.fst.SimpleTagger --train true --model-file ~/Desktop/Project/Data/T/sequenceTagging/seqTagger ~/Desktop/Project/Data/T/sequenceTagging/input5x5-sw-re.txt 
where:
	model-file is the output to which the model will be written to.
	The next parameter is the input data with the samples when gene is used properly.

--Testings
Need to see how it would behave when there is only one label.