#################################################To use the tmsk tool#############################################################################

Set up the config file.
	doctag = is what makes the contents distinguisbale from the other files. In our case, for the good sample T, it was ' doc'
	bodytags = show the text to be used by the program. In our case 'str'

To create a dictionary:
	move to the folder where tmsk is. cd ../../tmsk from the main cmd.
	type: java mkdict 50 test2.dx
		where, 50 is the number of words in the dictionary and test2 is the name of the file to be saved
	Stopwords are removed after the dictionary is generated.

To create the vector format of the good samples based on the dictionary:
	command: java vectorize vectorfile
	Configure the parameters:
		doctag, bodytag, labeltag, infile.
		dictionay: the one generated by us.
		vectorfile: In my tests I left it commented and still works.

To visualize the vectorized file:
	On excel:
		Select open all files, set delimitado, espaco, geral e concluir.
	To interpret the vec file:
		The number of rows connect to the number of files in the good sample.
		The notation 2@3 means that in that row (file), the word 2 appeared 3 times.

To match a given doc that is a response fom solr against the good samples:
	java matcher goodSample 60 outputfile
		Where, 60 is the 60 top files.
		In the propfile, infile should point to the response of the query against solr.


################################################# To use the riltext tool########################################################################


############################################################# Tests #############################################################################

To run a query in Solr that uses 3 to 5 of the keywords generated by tmsk tool. We should use the unlabeled sample: TGene to generate the sparse vector. Then, match the results to see the tops documents and see the results of prediction. The number max of results in Solr is 10000, 7000, 5000, 2000


################################################# Some results ##################################################################################

I ran kiktext tool to create the rule set; however, it classified many files wrong. For the rule it created was to broad.


######################################################### In PubMed #############################################################################

Use this link http://www.ncbi.nlm.nih.gov/pubmed?LinkName=gene_pubmed&from_uid=5694
Where uid is the id of the gene.
Go to Summary and select PMID list. :)
Or even to Abstract text or XMl.

############################################################ In Solr ############################################################################
Query example: (brachyury AND chordoma) OR (brachyury AND expression) OR (chordoma AND expression) OR brachyury  OR chordoma OR - Didn't work well

########################################################## In linux #######################################################################
Use the directive -cp tmsk.jar
For instance, for creating a dictionary: 
	java -cp tmsk.jar mkdir 50 test2.dx
Where after -cp and before mkdir the path to tmsk.jar is especified.

